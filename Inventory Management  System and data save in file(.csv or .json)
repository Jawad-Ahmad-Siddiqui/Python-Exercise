import pandas as pd
from tabulate import tabulate

print("-------Inventory Management System-------")

# Class to represent an inventory item
class InventoryItem:
    def __init__(self, item_id, item_name, item_quantity, item_price, item_category):
        self.item_id = item_id
        self.item_name = item_name
        self.item_quantity = item_quantity
        self.item_price = item_price
        self.item_category = item_category

# Class to manage the inventory
class Inventory:
    def __init__(self):
        self.items = []

    # Method to add an item to the inventory
    def add_item(self, item):
        if any(existing_item.item_id == item.item_id for existing_item in self.items):
            print(f"Item ID {item.item_id} already exists. Use update to change the item details.")
        else:
            self.items.append(item)
            print(f"Item with ID {item.item_id} added successfully.")

    # Method to search for an item by item ID
    def search_item(self, item_id):
        filtered_items = [item for item in self.items if item.item_id == item_id]
        if filtered_items:
            return filtered_items[0]
        else:
            return None

    # Method to delete an item from the inventory
    def delete_item(self, item_id):
        item_to_delete = self.search_item(item_id)
        if item_to_delete:
            self.items.remove(item_to_delete)
            print(f"Item with ID {item_id} deleted successfully.")
        else:
            print(f"No item found with Item ID {item_id}.")

    # Method to update an existing item in the inventory
    def update_item(self, item_id, new_item):
        item_to_update = self.search_item(item_id)
        if item_to_update:
            item_to_update.item_name = new_item.item_name
            item_to_update.item_quantity = new_item.item_quantity
            item_to_update.item_price = new_item.item_price
            item_to_update.item_category = new_item.item_category
            print(f"Item with ID {item_id} updated successfully.")
        else:
            print(f"No item found with Item ID {item_id}.")

    # Method to list all items in the inventory
    def list_items(self):
        return self.items

    # Method to save the inventory to a CSV file
    def save_to_file(self, filename):
        data = [{'Item ID': item.item_id, 'Item Name': item.item_name, 'Quantity': item.item_quantity, 'Price': item.item_price, 'Category': item.item_category} for item in self.items]
        df = pd.DataFrame(data)
        df.to_csv(filename, index=False)
        print(f"Inventory saved to {filename}")

# Function to handle user input with validation
def input_with_validation(prompt, validation_func):
    while True:
        try:
            value = input(prompt)
            return validation_func(value)
        except ValueError as e:
            print(f"Invalid input: {e}")

# Function to add a new item to the inventory
def add_item(inventory):
    print("Adding a new item...")
    item_id = input_with_validation("Enter item ID (integer): ", int)
    item_name = input("Enter item name: ")
    item_quantity = input_with_validation("Enter item quantity (integer): ", int)
    item_price = input_with_validation("Enter item price (float): ", float)
    item_category = input("Enter item category: ")
    item = InventoryItem(item_id, item_name, item_quantity, item_price, item_category)
    inventory.add_item(item)

# Function to search for an item in the inventory
def search_item(inventory):
    print("Searching for an item...")
    item_id = input_with_validation("Enter the Item ID (integer) you want to search: ", int)
    item = inventory.search_item(item_id)
    if item:
        df = pd.DataFrame([vars(item)])
        print(tabulate(df, headers='keys', tablefmt='grid', showindex=False, stralign='center', numalign='center'))
    else:
        print(f"No item found with Item ID {item_id}")

# Function to delete an item from the inventory
def delete_item(inventory):
    print("Deleting an item...")
    item_id = input_with_validation("Enter the Item ID (integer) you want to delete: ", int)
    inventory.delete_item(item_id)

# Function to update an item in the inventory
def update_item(inventory):
    print("Updating an item...")
    item_id = input_with_validation("Enter the Item ID (integer) you want to update: ", int)
    if inventory.search_item(item_id):
        print("Enter new details for the item:")
        item_name = input("Enter new item name: ")
        item_quantity = input_with_validation("Enter new item quantity (integer): ", int)
        item_price = input_with_validation("Enter new item price (float): ", float)
        item_category = input("Enter new item category: ")
        new_item = InventoryItem(item_id, item_name, item_quantity, item_price, item_category)
        inventory.update_item(item_id, new_item)
    else:
        print(f"No item found with Item ID {item_id}")

# Function to list all items in the inventory
def list_items(inventory):
    print("Listing all items...")
    items = inventory.list_items()
    if items:
        data = [{'Item ID': item.item_id, 'Item Name': item.item_name, 'Quantity': item.item_quantity, 'Price': item.item_price, 'Category': item.item_category} for item in items]
        df = pd.DataFrame(data)
        df.insert(0, 'Serial No', range(1, len(df) + 1))
        print(tabulate(df, headers='keys', tablefmt='grid', showindex=False, stralign='center', numalign='center'))
    else:
        print("No items in inventory.")

# Function to save the inventory to a file
def save_inventory(inventory):
    filename = input("Enter filename to save the inventory (e.g., inventory.csv): ")
    inventory.save_to_file(filename)

# Create an instance of the Inventory class
inventory = Inventory()

# Main loop to interact with the user
while True:
    print("\n1.) Add Item \n2.) Search Item \n3.) Delete Item \n4.) Update Item \n5.) List All Items \n6.) Save Inventory \n7.) Exit")
    select = input("Select an option (1-7): ")

    if select == '1':
        add_item(inventory)
    elif select == '2':
        search_item(inventory)
    elif select == '3':
        delete_item(inventory)
    elif select == '4':
        update_item(inventory)
    elif select == '5':
        list_items(inventory)
    elif select == '6':
        save_inventory(inventory)
    elif select == '7':
        print("Database closed successfully. Exiting the program.")
        break
    else:
        print("Invalid selection! Please choose a valid option.")



